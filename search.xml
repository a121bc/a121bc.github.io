<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[MyBatis逆向工程]]></title>
    <url>%2F2018%2F02%2F21%2FMyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[在最近的项目中又一次使用了mybatis，继JDBC和Hibernate的学习和使用之后，最新的一款技术，现在整理下学过的内容。 数据库技术回顾回顾JDBC开发 优点：简单易学，上手快，非常灵活的构建SQL，效率高 缺点：代码繁琐，难以卸除高质量的代码（例如：资源释放，SQL注入安全性等），开发者既要写业务逻辑，又要写对象的创建和销毁，必须懂底层数据库的语法（例如：分页）。 适用于超大批量数据的操作，速度快 回顾Hibernate 优点：不用写SQL，完全以面向对象的方式设计和访问，不用管底层具体数据库的语法，（例如：分页）便于理解。 缺点：处理复杂业务时，灵活度差,复杂的HQL难写难理解，例如多表查询的HQL语句。 适合于中小批量数据的操作，速度慢。 MyBatis基于上述二种支持，我们需要在中间找到一个平衡点呢？结合它们的优点，摒弃它们的缺点，这就是MyBatis，现今MyBatis被广泛的企业所采用。 什么是MyBatisMyBatis 是一款一流的支持自定义 SQL、存储过程和高级映射的持久化框架。MyBatis几乎消除了所有的JDBC代码，也基本不需要手工去设置参数和获取检索结果。MyBatis能够使用简单的XML格式或者注解进行来配置，能够映射基本数据元素、Map 接口和POJOs（普通java对象）到数据库中的记录。 MyBatis本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation迁移到了googlecode，并且改名为MyBatis。2013年11月迁移到Github。 iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。 jdbc/dbutils/springdao，hibernate/springorm，mybaits同属于ORM解决方案之一。 逆向工程jar包使用逆向工程生成代码，首先需要jar包，可以去github下载。MyBatis Generator Release 配置文件准备配置文件，配置文件要告诉逆向工程： 如何连接到数据库 要生成哪些对象，以及如何生成他们 哪些表用于对象生成 以下为官方的配置文件示例： 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt; &lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt; &lt;context id="DB2Tables" targetRuntime="MyBatis3"&gt; &lt;jdbcConnection driverClass="COM.ibm.db2.jdbc.app.DB2Driver" connectionURL="jdbc:db2:TEST" userId="db2admin" password="db2admin"&gt; &lt;/jdbcConnection&gt; &lt;javaTypeResolver &gt; &lt;property name="forceBigDecimals" value="false" /&gt; &lt;/javaTypeResolver&gt; &lt;javaModelGenerator targetPackage="test.model" targetProject="\MBGTestProject\src"&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;property name="trimStrings" value="true" /&gt; &lt;/javaModelGenerator&gt; &lt;sqlMapGenerator targetPackage="test.xml" targetProject="\MBGTestProject\src"&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/sqlMapGenerator&gt; &lt;javaClientGenerator type="XMLMAPPER" targetPackage="test.dao" targetProject="\MBGTestProject\src"&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/javaClientGenerator&gt; &lt;table schema="DB2ADMIN" tableName="ALLTYPES" domainObjectName="Customer" &gt; &lt;property name="useActualColumnNames" value="true"/&gt; &lt;generatedKey column="ID" sqlStatement="DB2" identity="true" /&gt; &lt;columnOverride column="DATE_FIELD" property="startDate" /&gt; &lt;ignoreColumn column="FRED" /&gt; &lt;columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" /&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 下面是某项目的配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt; &lt;context id="testTables" targetRuntime="MyBatis3"&gt; &lt;commentGenerator type="org.mybatis.generator.plugins.comment.MyCommentGenerator"&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 &lt;property name="suppressAllComments" value="true" /&gt; --&gt; &lt;/commentGenerator&gt; &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt; &lt;jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/[数据库名]" userId="root" password="root"&gt; &lt;/jdbcConnection&gt; &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt; &lt;javaTypeResolver&gt; &lt;property name="forceBigDecimals" value="false" /&gt; &lt;/javaTypeResolver&gt; &lt;!-- targetProject:生成PO类的位置 --&gt; &lt;javaModelGenerator targetPackage="com.[项目名].pojo" targetProject=".\src"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name="enableSubPackages" value="false" /&gt; &lt;!-- 从数据库返回的值被清理前后的空格 --&gt; &lt;property name="trimStrings" value="true" /&gt; &lt;/javaModelGenerator&gt; &lt;!-- targetProject:mapper映射文件生成的位置 --&gt; &lt;sqlMapGenerator targetPackage="com.[项目名].dao" targetProject=".\src"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name="enableSubPackages" value="false" /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- targetPackage：mapper接口生成的位置 --&gt; &lt;javaClientGenerator type="XMLMAPPER" targetPackage="com.[项目名].dao" targetProject=".\src"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 指定数据库表 --&gt; &lt;table schema="" tableName="tb_content"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_content_category"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item_cat"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item_desc"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item_param"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item_param_item"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_order"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_order_item"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_order_shipping"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_user"&gt;&lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; JAVA程序1234567891011121314151617181920212223242526272829303132333435import java.io.File;import java.util.ArrayList;import java.util.List;import org.mybatis.generator.api.MyBatisGenerator;import org.mybatis.generator.config.Configuration;import org.mybatis.generator.config.xml.ConfigurationParser;import org.mybatis.generator.internal.DefaultShellCallback;public class GeneratorSqlmap &#123; public void generator() throws Exception&#123; List&lt;String&gt; warnings = new ArrayList&lt;String&gt;(); boolean overwrite = true; File configFile = new File("generatorConfig.xml"); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(configFile); DefaultShellCallback callback = new DefaultShellCallback(overwrite); MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); myBatisGenerator.generate(null); &#125; public static void main(String[] args) throws Exception &#123; try &#123; GeneratorSqlmap generatorSqlmap = new GeneratorSqlmap(); generatorSqlmap.generator(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 运行java程序后，即可在 com.[项目名].pojo 包下生成接口文件，com.[项目名].dao 包下生成映射文件，复制到对应项目中即可使用。]]></content>
      <categories>
        <category>电脑技术</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>逆向工程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，Hexo]]></title>
    <url>%2F2018%2F02%2F19%2F%E4%BD%A0%E5%A5%BD%EF%BC%8CHexo%2F</url>
    <content type="text"><![CDATA[第一次写点什么呢，记录一下hexo博客的搭建过程吧。最开始是在GitHub上申请的账户，然后安装GitHubDesktop，下载了一个模板就没在动了。今天，一大早决定重新整一下博客，在知乎上发现了hexo，就按着教程安了几遍，教程有点旧，重新找了几篇，到现在也算是基本搭建好了，界面还不太美观，以后慢慢改吧。下面说一下简单的流程，记录一下。 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装前准备请在安装之前检查是否安装下列应用程序： Node.js Git 以上安装很简单，官网进去后根据对应的系统下载相应版本即可。 确认安装环境打开命令窗口（Win+R，输入CMD，回车），分别输入node -v，npm -v，git –version，结果如下图即安装好了。 开始安装接下来进入已安装好的开始菜单栏下Git文件夹，运行Git Bash，然后运行下列代码： SSH授权1$ ssh-keygen -t rsa 然后进入C盘用户文件夹下的.ssh文件夹，找到id_rsa和id_rsa.pub这两个文件，用记事本打开id_rsa.pub，复制其中的全部内容，到GitHub里，进入Setting，选择SSH andGPG keys，添加内容即可。 添加完成后，在git bash中测试，输入： 1$ ssh -T git@github.com 显示如下图，即成功： 安装Hexo运行Git Bash，输入以下内容： 123456$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo g$ hexo s 然后打开http://localhost:4000/ ，你的本地博客就搭建好了。 发布博客更换主题默认的主题不喜欢，可以去hexo官网的theme，更换主题。 复制url，在git hash命令窗口下克隆主题 1$ git clone https://github.com/iissnan/hexo-theme-next.git /themes/next/ 上传项目接着，在配置文件_config.yml中作出如下更改 在git hash命令窗口，输入： 1$ hexo d 你的博客就发布好了。]]></content>
      <categories>
        <category>生活日记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
