<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[搭建图片服务器]]></title>
    <url>%2F2018%2F02%2F22%2F%E6%90%AD%E5%BB%BA%E5%9B%BE%E7%89%87%E6%9C%8D%E5%8A%A1%E5%99%A8%2F</url>
    <content type="text"><![CDATA[项目中需要搭建一个图片服务器，专门用于保存图片，在线寻找成熟的技术，于是乎发现了FastDFS，网上关于FastDFS的学习资料很多，在此整理一下，复习一遍，方便以后再次使用。 FastDFS介绍FastDFS开源地址：https://github.com/happyfish100 什么是FastDFSFastDFS是用c语言编写的一款开源的分布式文件系统。FastDFS为互联网量身定制，充分考虑了冗余备份、负载均衡、线性扩容等机制，并注重高可用、高性能等指标，使用FastDFS很容易搭建一套高性能的文件服务器集群提供文件上传、下载等服务。 FastDFS架构FastDFS架构包括 Tracker server和Storage server。客户端请求Tracker server进行文件上传、下载，通过Tracker server调度最终由Storage server完成文件上传和下载。Tracker server作用是负载均衡和调度，通过Tracker server在文件上传时可以根据一些策略找到Storage server提供文件上传服务。可以将tracker称为追踪服务器或调度服务器。Storage server作用是文件存储，客户端上传的文件最终存储在Storage服务器上，Storage server没有实现自己的文件系统而是利用操作系统的文件系统来管理文件。可以将storage称为存储服务器。如下图： 服务端两个角色：Tracker：管理集群，tracker也可以实现集群。每个tracker节点地位平等。收集Storage集群的状态。Storage：实际保存文件Storage分为多个组，每个组之间保存的文件是不同的。每个组内部可以有多个成员，组成员内部保存的内容是一样的，组成员的地位是一致的，没有主从的概念。 Tracker 集群FastDFS集群中的Tracker server可以有多台，Tracker server之间是相互平等关系同时提供服务，Tracker server不存在单点故障。客户端请求Tracker server采用轮询方式，如果请求的tracker无法提供服务则换另一个tracker。 Storage集群Storage集群采用了分组存储方式。storage集群由一个或多个组构成，集群存储总容量为集群中所有组的存储容量之和。一个组由一台或多台存储服务器组成，组内的Storage server之间是平等关系，不同组的Storage server之间不会相互通信，同组内的Storage server之间会相互连接进行文件同步，从而保证同组内每个storage上的文件完全一致的。一个组的存储容量为该组内存储服务器容量最小的那个，由此可见组内存储服务器的软硬件配置最好是一致的。采用分组存储方式的好处是灵活、可控性较强。比如上传文件时，可以由客户端直接指定上传到的组也可以由tracker进行调度选择。一个分组的存储服务器访问压力较大时，可以在该组增加存储服务器来扩充服务能力（纵向扩容）。当系统容量不足时，可以增加组来扩充存储容量（横向扩容）。 Storage状态收集Storage server会连接集群中所有的Tracker server，定时向他们报告自己的状态，包括磁盘剩余空间、文件同步状况、文件上传下载次数等统计信息。 文件上传流程 客户端上传文件后存储服务器将文件ID返回给客户端，此文件ID用于以后访问该文件的索引信息。文件索引信息包括：组名，虚拟磁盘路径，数据两级目录，文件名。 组名：文件上传后所在的storage组名称，在文件上传成功后有storage服务器返回，需要客户端自行保存。 虚拟磁盘路径：storage配置的虚拟路径，与磁盘选项store_path* 对应。如果配置了store_path0则是M00，如果配置了store_path1则是M01，以此类推。 数据两级目录：storage服务器在每个虚拟磁盘路径下创建的两级目录，用于存储数据文件。 文件名：与文件上传时不同。是由存储服务器根据特定信息生成，文件名包含：源存储服务器IP地址、文件创建时间戳、文件大小、随机数和文件拓展名等信息。 文件下载流程 tracker根据请求的文件路径即文件ID 来快速定义文件。比如请求下边的文件： 通过组名tracker能够很快的定位到客户端需要访问的存储服务器组是group1，并选择合适的存储服务器提供客户端访问。 存储服务器根据“文件存储虚拟磁盘路径”和“数据文件两级目录”可以很快定位到文件所在目录，并根据文件名找到客户端需要访问的文件。 FastDFS+Nginx实现文件服务器架构图 确定安装版本fastdfs-5.05.tar.gzfastdfs-nginx-module_v1.16.tar.gzlibfastcommon-1.0.7.zipnginx-1.7.8.tar.gzngx-cache_purge-2.1.tar.gzperl-5.20.2.tar.gz 安装虚拟机环境这里使用的是CentOS 7，如果没有搭建过虚拟机，请参考其他教程。 安装libfastcommon-1.0.7.zip在安装libfastcommon时，如果没有安装unzip、zip、perl、gcc等，逐一安装即可。 利用unzip解压缩，如果没有提示安装，则按照下图的命令安装即可： 解压完成后，进入文件夹，使用./make.sh命令，如果没有安装gcc和perl会报错： 安装gcc 12yum -y install gccyum -y install gcc-c++ 安装perl，可以使用wget安装：1234567wget http://www.cpan.org/src/5.0/perl-5.20.2.tar.gztar zxf perl-5.20.2.tar.gzmkdir /usr/local/perl./Configure -des -Dprefix=/usr/local/perl -Dusethreads -Uversiononlymakemake installperl -version 安装完成后，重新依次执行 12yum -y install gccyum -y install gcc-c++ 完成libfastcommon的安装。 注意，上述安装路径在/usr/lib64，但是FasrDFS主程序设置的lib目录是/usr/local/lib,所以需要建立软连接： 1234ln -s /usr/lib64/libfastcommon.so /usr/local/lib/libfastcommon.soln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.soln -s /usr/lib64/libfdfsclient.so /usr/local/lib/libfdfsclient.soln -s /usr/lib64/libfdfsclient.so /usr/lib/libfdfsclient.so 安装fastdfs-5.05.tar.gz前几步安装成功后，开始安装fastdfs，先解压文件，在编译和安装即可，整个过程没有报错，并且打开/etc/fdfs这个目录发现配置文件存在，就说明安装成功了。 配置tracker： 进入/etc/fdfs文件夹，执行cp tracker.conf.sample tracker.conf。 编辑tracker.conf，执行命令vi tracker.conf，修改如下参数： 123disabl ed=false #启动配置文件port=22122 #设置tracker的端口号，默认22122base_path=/opt/fastdfs_tracker #设置tracker的数据文件和日志目录（预先创建） 启动tracker，执行命令：/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart 启动完毕后，可以通过以下两个方法查看tracker是否启动成功：netstat -unltp|grep fdfs，查看22122端口监听情况。tail -100f /opt/fastdfs_tracker/logs/trackerd.log查看tracker启动日志 启动没有问题，则可以将tracker添加到开机启动项： 打开文件 vi /etc/rc.d/rc.local添加如下命令到文件中 /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart 配置storagestorage的配置文件与tracker类似，以192.168.50.21为例 进入/etc/fdfs文件夹，执行：cp storage.conf.sample storage.conf。 编辑storage.conf，执行：vi storage.conf，修改如下选项： 12345678a. disabled=false #启动配置文件b. group_name=group1 #组名c. port=23000 #storage端口号，默认为23000，同一组的端口号要一致d. base_path=/opt/fastdfs_storage_info #设置storage的日志目录（需要预先创建）e. store_path_count=1 #存储路径个数，需要和store_path个数匹配f. store_path0=/opt/fastdfs_storage_data #存储路径g. tracker_server=192.168.50.21:22122 #tracker服务器ip地址和端口号` 启动storage，执行命令：/usr/bin/fdfs_storage /etc/fdfs/storage.conf restart 启动完毕后，可以通过以下两个方法查看tracker是否启动成功：netstat -unltp|grep fdfs，查看23000端口监听情况。tail -100f /opt/fastdfs_storage_info/logs/storage.log查看storage启动日志 启动完成后，可以通过fdfs_monitor查看集群情况，查看storage是否注册到tracker服务器中：/usr/bin/fdfs_monitor /etc/fdfs/storage.conf，查看192.168.50.21是ACTIVE状态即可 启动没有问题，则可以将tracker添加到开机启动项：打开文件 vi /etc/rc.d/rc.local添加如下命令到文件中 /usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart 安装nginx环境以上配置已经完成fastdfs配置，如果用java等api客户端就可以完成文件的上传、同步和下载。但是如果要实现基于http协议的下载功能，就需要安装nginx。 无论是在tracker还是storage中安装nginx，都需要安装一些基础软件，请在安装nginx之前确认是否安装以下软件： 123451. yum install -y gcc 2. yum install -y gcc-c++3. yum install -y pcre pcre-devel4. yum install -y zlib zli b-devel5. yum install -y openssl openssl-devel 在storage中安装nginx 创建nginx默认安装的文件夹:mkdir /usr/local/nginx 解压缩fastdfs-nginx-module_v1.16.tar.gz，进入fastdfs-nginx-module/src目录，编辑config文件，找到CORE_INCS这一行，将路径中的local全部去掉，更改为：CORE_INCS=&quot;$CORE_INCS/usr/include/fastdfs /usr/include/fastcommon/&quot; 进入nginx1.7.8文件夹，执行如下命令：./configure --prefix=/usr/local/nginx --add-module=/myself_settings/fastdfs-nginxmodule/fastdfs-nginx-module/src 开始编译make和安装make install这两个命令，没有报错就是安好了。 执行命令cd /usr/local/nginx/conf，编辑nginx.conf，编辑如下： 123456li sten 8080;##在server段中添加:locati on ~/group[1-3]/M00&#123;root/fdfs/storage/data;ngx_fastdfs_module;&#125; 选择好group分组，如果配置的storage是在group2组，则location应该是/group2/M00。 执行命令 cd /myself_settings/fastdfs5.0.5/fastdfs-5.05/conf ，将目录中的http.conf和mime.types拷贝到/etc/fdfs/下。 执行命令 cd /myself_settings/fastdfs_nginx_module/fastdfs-nginx-module/src ，将目录下面的mod_fastdfs.conf拷贝到/etc/fdfs目录下。 打开/etc/fdfs这个目录，编辑,od_fastdfs.conf这个文件，如下: 123456789base_path=/opt/fastdfs_storage_info #保存日志目录tracker_server=192.168.50.21:22122 #tracker服务器的ip和端口storage_server_port=23001 #storage服务器的端口号group_name=group2 #当前的group名url_have_group_name= true #文件url中是否有group名store_path_count=1 #存储路径个数，需要和store_path个数匹配store_path0=/opt/fastdfs_storage_data #存储路径http. need_find_content_type=true #从文件扩展名查找文件类型（nginx时为true）group_count= 2 #设置组的个数 在文件末尾追加如图配置： 建立软连接：ln -s /opt/fastdfs_storage_data/data /opt/fastdfs_storage_data/data/M00 执行命令启动 /usr/local/nginx/sbin/nginx ，如果/usr/local/nginx/logs/error.log中无报错，则访问192.168.50.21:8080这个url可以看见ngxin的欢迎页面。]]></content>
      <categories>
        <category>电脑技术</category>
      </categories>
      <tags>
        <tag>图片服务器</tag>
        <tag>FastDFS</tag>
        <tag>分布式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Dubbo学习笔记]]></title>
    <url>%2F2018%2F02%2F21%2FDubbo%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[最近的项目用的是SOA架构，表现层和服务层是不同的工程。所以为了实现列表的查询需要多个系统间的通信。如何实现远程通信，目前有三种解决方案： Webservice：效率不高基于soap协议。项目中不推荐使用。 使用restful形式的服务：http+json。很多项目中应用。如果服务太多，服务之间调用关系混乱，需要治疗服务。 使用dubbo。使用rpc协议进行远程调用，直接使用socket通信。传输效率高，并且可以统计出系统之间的调用关系、调用次数。 什么是dubboDubbo是阿里巴巴开源出来的一个分布式服务框架，致力于提供高性能和透明化的RPC远程服务调用方案，以及作为SOA服务治理的方案。它的核心功能包括： remoting: 远程通讯基础，提供对多种NIO框架抽象封装，包括“同步转异步”和“请求-响应”模式的信息交换方式。 Cluster: 服务框架核心，提供基于接口方法的远程过程调用，包括多协议支持，并提供软负载均衡和容错机制的集群支持。 registry: 服务注册中心，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。 由于Dubbo团队的文档和代码都非常优秀，所以更多关于dubbo的方方面面请参考网站。 安装注册中心注册中心负责服务地址的注册与查找，相当于目录服务，服务提供者和消费者只在启动时与注册中心交互，注册中心不转发请求，压力较小。使用dubbo-2.3.3以上版本，建议使用zookeeper注册中心。Zookeeper是Apacahe Hadoop的子项目，是一个树型的目录服务，支持变更推送，适合作为Dubbo服务的注册中心，工业强度较高，可用于生产环境，并推荐使用。 安装环境为CentOS 7，安装步骤： 安装jdk 解压缩zookeeper压缩包 将conf文件夹下zoo_sample.cfg复制一份，改名为zoo.cfg 修改配置dataDir属性，指定一个真实目录 启动zookeeper： 1bin/zkServer.sh start 关闭zookeeper： 1bin/zkServer.sh stop 查看zookeeper状态： 1bin/zkServer.sh status 注意要关闭Linux防火墙。 添加Jar包使用maven管理工程，在pom中添加：123456789101112131415&lt;!-- dubbo相关 --&gt;&lt;dependency&gt; &lt;groupId&gt;com.alibaba&lt;/groupId&gt; &lt;artifactId&gt;dubbo&lt;/artifactId&gt; &lt;exclusions&gt; &lt;exclusion&gt; &lt;groupId&gt;org.springframework&lt;/groupId&gt; &lt;artifactId&gt;spring&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;exclusion&gt; &lt;groupId&gt;org.jboss.netty&lt;/groupId&gt; &lt;artifactId&gt;netty&lt;/artifactId&gt; &lt;/exclusion&gt; &lt;/exclusions&gt;&lt;/dependency&gt; 发布dubbo服务在spring的配置文件中添加dubbo的约束，然后使用dubbo:service发布服务。 123456789101112131415161718192021222324&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p" xmlns:aop="http://www.springframework.org/schema/aop" xmlns:tx="http://www.springframework.org/schema/tx" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.2.xsd"&gt; &lt;context:component-scan base-package="com.[项目名].service"&gt;&lt;/context:component-scan&gt; &lt;!-- 使用dubbo发布服务 --&gt; &lt;!-- 提供方应用信息，用于计算依赖关系 --&gt; &lt;dubbo:application name="[项目名]-manager" /&gt; &lt;dubbo:registry protocol="zookeeper" address="192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183" /&gt; &lt;!-- 用dubbo协议在20880端口暴露服务 --&gt; &lt;dubbo:protocol name="dubbo" port="20880" /&gt; &lt;!-- 声明需要暴露的服务接口 --&gt; &lt;dubbo:service interface="com.[项目名].service.ItemService" ref="itemServiceImpl" /&gt;&lt;/beans&gt; 引用服务在springMVC的配置文件中添加服务的引用 12345678910111213141516171819202122232425&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p" xmlns:context="http://www.springframework.org/schema/context" xmlns:dubbo="http://code.alibabatech.com/schema/dubbo" xmlns:mvc="http://www.springframework.org/schema/mvc" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd"&gt; &lt;context:component-scan base-package="com.[项目名].controller" /&gt; &lt;mvc:annotation-driven /&gt; &lt;bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"&gt; &lt;property name="prefix" value="/WEB-INF/jsp/" /&gt; &lt;property name="suffix" value=".jsp" /&gt; &lt;/bean&gt; &lt;!-- 引用dubbo服务 --&gt; &lt;dubbo:application name="[项目名]-manager-web"/&gt; &lt;dubbo:registry protocol="zookeeper" address="192.168.25.154:2181,192.168.25.154:2182,192.168.25.154:2183"/&gt; &lt;dubbo:reference interface="com.[项目名].service.ItemService" id="itemService" /&gt; &lt;/beans&gt; Dubbo监控中心需要安装tomcat，然后部署监控中心即可。 部署监控中心： 1[root@localhost ~]# cp dubbo-admin-2.5.4.war apache-tomcat-7.0.47/webapps/dubbo-admin.war 启动tomcat 访问 tomcat的ip端口下的/dubbo-admin/ ，用户名和密码均为：root 如果监控中心和注册中心在同一台服务器上，可以不需要任何配置。如果不在同一台服务器，需要修改配置文件：/root/apache-tomcat-7.0.47/webapps/dubbo-admin/WEB-INF/dubbo.properties如下图：]]></content>
      <categories>
        <category>电脑技术</category>
      </categories>
      <tags>
        <tag>dubbo</tag>
        <tag>Linux</tag>
        <tag>SOA</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MyBatis逆向工程]]></title>
    <url>%2F2018%2F02%2F21%2FMyBatis%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[在最近的项目中又一次使用了mybatis，继JDBC和Hibernate的学习和使用之后，最新的一款技术，现在整理下学过的内容。 数据库技术回顾回顾JDBC开发 优点：简单易学，上手快，非常灵活的构建SQL，效率高 缺点：代码繁琐，难以卸除高质量的代码（例如：资源释放，SQL注入安全性等），开发者既要写业务逻辑，又要写对象的创建和销毁，必须懂底层数据库的语法（例如：分页）。 适用于超大批量数据的操作，速度快 回顾Hibernate 优点：不用写SQL，完全以面向对象的方式设计和访问，不用管底层具体数据库的语法，（例如：分页）便于理解。 缺点：处理复杂业务时，灵活度差,复杂的HQL难写难理解，例如多表查询的HQL语句。 适合于中小批量数据的操作，速度慢。 MyBatis基于上述二种支持，我们需要在中间找到一个平衡点呢？结合它们的优点，摒弃它们的缺点，这就是MyBatis，现今MyBatis被广泛的企业所采用。 什么是MyBatisMyBatis 是一款一流的支持自定义 SQL、存储过程和高级映射的持久化框架。MyBatis几乎消除了所有的JDBC代码，也基本不需要手工去设置参数和获取检索结果。MyBatis能够使用简单的XML格式或者注解进行来配置，能够映射基本数据元素、Map 接口和POJOs（普通java对象）到数据库中的记录。 MyBatis本是apache的一个开源项目iBatis, 2010年这个项目由apache software foundation迁移到了googlecode，并且改名为MyBatis。2013年11月迁移到Github。 iBATIS一词来源于“internet”和“abatis”的组合，是一个基于Java的持久层框架。iBATIS提供的持久层框架包括SQL Maps和Data Access Objects（DAO）。 jdbc/dbutils/springdao，hibernate/springorm，mybaits同属于ORM解决方案之一。 逆向工程jar包使用逆向工程生成代码，首先需要jar包，可以去github下载。MyBatis Generator Release 配置文件准备配置文件，配置文件要告诉逆向工程： 如何连接到数据库 要生成哪些对象，以及如何生成他们 哪些表用于对象生成 以下为官方的配置文件示例： 123456789101112131415161718192021222324252627282930313233343536373839404142&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt; &lt;classPathEntry location="/Program Files/IBM/SQLLIB/java/db2java.zip" /&gt; &lt;context id="DB2Tables" targetRuntime="MyBatis3"&gt; &lt;jdbcConnection driverClass="COM.ibm.db2.jdbc.app.DB2Driver" connectionURL="jdbc:db2:TEST" userId="db2admin" password="db2admin"&gt; &lt;/jdbcConnection&gt; &lt;javaTypeResolver &gt; &lt;property name="forceBigDecimals" value="false" /&gt; &lt;/javaTypeResolver&gt; &lt;javaModelGenerator targetPackage="test.model" targetProject="\MBGTestProject\src"&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;property name="trimStrings" value="true" /&gt; &lt;/javaModelGenerator&gt; &lt;sqlMapGenerator targetPackage="test.xml" targetProject="\MBGTestProject\src"&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/sqlMapGenerator&gt; &lt;javaClientGenerator type="XMLMAPPER" targetPackage="test.dao" targetProject="\MBGTestProject\src"&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/javaClientGenerator&gt; &lt;table schema="DB2ADMIN" tableName="ALLTYPES" domainObjectName="Customer" &gt; &lt;property name="useActualColumnNames" value="true"/&gt; &lt;generatedKey column="ID" sqlStatement="DB2" identity="true" /&gt; &lt;columnOverride column="DATE_FIELD" property="startDate" /&gt; &lt;ignoreColumn column="FRED" /&gt; &lt;columnOverride column="LONG_VARCHAR_FIELD" jdbcType="VARCHAR" /&gt; &lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; 下面是某项目的配置文件： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE generatorConfiguration PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN" "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd"&gt;&lt;generatorConfiguration&gt; &lt;context id="testTables" targetRuntime="MyBatis3"&gt; &lt;commentGenerator type="org.mybatis.generator.plugins.comment.MyCommentGenerator"&gt; &lt;!-- 是否去除自动生成的注释 true：是 ： false:否 &lt;property name="suppressAllComments" value="true" /&gt; --&gt; &lt;/commentGenerator&gt; &lt;!--数据库连接的信息：驱动类、连接地址、用户名、密码 --&gt; &lt;jdbcConnection driverClass="com.mysql.jdbc.Driver" connectionURL="jdbc:mysql://localhost:3306/[数据库名]" userId="root" password="root"&gt; &lt;/jdbcConnection&gt; &lt;!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal --&gt; &lt;javaTypeResolver&gt; &lt;property name="forceBigDecimals" value="false" /&gt; &lt;/javaTypeResolver&gt; &lt;!-- targetProject:生成PO类的位置 --&gt; &lt;javaModelGenerator targetPackage="com.[项目名].pojo" targetProject=".\src"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name="enableSubPackages" value="false" /&gt; &lt;!-- 从数据库返回的值被清理前后的空格 --&gt; &lt;property name="trimStrings" value="true" /&gt; &lt;/javaModelGenerator&gt; &lt;!-- targetProject:mapper映射文件生成的位置 --&gt; &lt;sqlMapGenerator targetPackage="com.[项目名].dao" targetProject=".\src"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name="enableSubPackages" value="false" /&gt; &lt;/sqlMapGenerator&gt; &lt;!-- targetPackage：mapper接口生成的位置 --&gt; &lt;javaClientGenerator type="XMLMAPPER" targetPackage="com.[项目名].dao" targetProject=".\src"&gt; &lt;!-- enableSubPackages:是否让schema作为包的后缀 --&gt; &lt;property name="enableSubPackages" value="true" /&gt; &lt;/javaClientGenerator&gt; &lt;!-- 指定数据库表 --&gt; &lt;table schema="" tableName="tb_content"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_content_category"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item_cat"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item_desc"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item_param"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_item_param_item"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_order"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_order_item"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_order_shipping"&gt;&lt;/table&gt; &lt;table schema="" tableName="tb_user"&gt;&lt;/table&gt; &lt;/context&gt;&lt;/generatorConfiguration&gt; JAVA程序1234567891011121314151617181920212223242526272829303132333435import java.io.File;import java.util.ArrayList;import java.util.List;import org.mybatis.generator.api.MyBatisGenerator;import org.mybatis.generator.config.Configuration;import org.mybatis.generator.config.xml.ConfigurationParser;import org.mybatis.generator.internal.DefaultShellCallback;public class GeneratorSqlmap &#123; public void generator() throws Exception&#123; List&lt;String&gt; warnings = new ArrayList&lt;String&gt;(); boolean overwrite = true; File configFile = new File("generatorConfig.xml"); ConfigurationParser cp = new ConfigurationParser(warnings); Configuration config = cp.parseConfiguration(configFile); DefaultShellCallback callback = new DefaultShellCallback(overwrite); MyBatisGenerator myBatisGenerator = new MyBatisGenerator(config, callback, warnings); myBatisGenerator.generate(null); &#125; public static void main(String[] args) throws Exception &#123; try &#123; GeneratorSqlmap generatorSqlmap = new GeneratorSqlmap(); generatorSqlmap.generator(); &#125; catch (Exception e) &#123; e.printStackTrace(); &#125; &#125;&#125; 运行java程序后，即可在 com.[项目名].pojo 包下生成接口文件，com.[项目名].dao 包下生成映射文件，复制到对应项目中即可使用。]]></content>
      <categories>
        <category>电脑技术</category>
      </categories>
      <tags>
        <tag>MyBatis</tag>
        <tag>逆向工程</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[你好，Hexo]]></title>
    <url>%2F2018%2F02%2F19%2F%E4%BD%A0%E5%A5%BD%EF%BC%8CHexo%2F</url>
    <content type="text"><![CDATA[第一次写点什么呢，记录一下hexo博客的搭建过程吧。最开始是在GitHub上申请的账户，然后安装GitHubDesktop，下载了一个模板就没在动了。今天，一大早决定重新整一下博客，在知乎上发现了hexo，就按着教程安了几遍，教程有点旧，重新找了几篇，到现在也算是基本搭建好了，界面还不太美观，以后慢慢改吧。下面说一下简单的流程，记录一下。 什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。 安装前准备请在安装之前检查是否安装下列应用程序： Node.js Git 以上安装很简单，官网进去后根据对应的系统下载相应版本即可。 确认安装环境打开命令窗口（Win+R，输入CMD，回车），分别输入node -v，npm -v，git –version，结果如下图即安装好了。 开始安装接下来进入已安装好的开始菜单栏下Git文件夹，运行Git Bash，然后运行下列代码： SSH授权1$ ssh-keygen -t rsa 然后进入C盘用户文件夹下的.ssh文件夹，找到id_rsa和id_rsa.pub这两个文件，用记事本打开id_rsa.pub，复制其中的全部内容，到GitHub里，进入Setting，选择SSH andGPG keys，添加内容即可。 添加完成后，在git bash中测试，输入： 1$ ssh -T git@github.com 显示如下图，即成功： 安装Hexo运行Git Bash，输入以下内容： 123456$ npm install hexo-cli -g$ hexo init blog$ cd blog$ npm install$ hexo g$ hexo s 然后打开http://localhost:4000/ ，你的本地博客就搭建好了。 发布博客更换主题默认的主题不喜欢，可以去hexo官网的theme，更换主题。 复制url，在git hash命令窗口下克隆主题 1$ git clone https://github.com/iissnan/hexo-theme-next.git /themes/next/ 上传项目接着，在配置文件_config.yml中作出如下更改 在git hash命令窗口，输入： 1$ hexo d 你的博客就发布好了。]]></content>
      <categories>
        <category>生活日记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>教程</tag>
      </tags>
  </entry>
</search>
